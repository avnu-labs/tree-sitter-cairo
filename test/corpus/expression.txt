============================
If expression
============================

fn foo() {
    if true { 8 } else { 9 }

    if true { 8 }

    if true { 8 }
    else if true { 8 }
    else { 9 }

    if if true { true } else { false } { false }
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (if_expression
                    (true)
                    (block (tail_expression (number (integer))))
                    (block (tail_expression (number (integer))))
                )
            )
            (statement
                (if_expression
                    (true)
                    (block (tail_expression (number (integer))))
                )
            )
            (statement
                (if_expression
                    (true)
                    (block (tail_expression (number (integer))))
                    (if_expression
                        (true)
                        (block (tail_expression (number (integer))))
                        (block (tail_expression (number (integer))))
                    )
                )
            )
            (tail_expression
                (if_expression
                    (if_expression
                        (true)
                        (block (tail_expression (true)))
                        (block (tail_expression (false)))
                    )
                    (block (tail_expression (false)))
                )
            )
        )
    )
)

============================
Loop expression
============================

fn foo() {
    loop {}

    let mut y = 0;
    loop {
        y *= 2;
    };
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement (loop_expression (block)))
            (statement
                (let_statement
                    (modifier_mut)
                    (identifier)
                    (number (integer))
                )
            )
            (statement
                (loop_expression
                    (block
                        (statement
                            (assignment_statement
                                (name)
                                (number (integer))
                            )
                        )
                    )
                )
            )
        )
    )
)

============================
Match expression
============================

fn foo() {
    match a {
        42 => 42,
        
        true => {},
        false => {},

        Option::Some(_) => {},
        Foo{ a, b } => {},
        (a, b) => {},

        _ => {}
    };
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (match_expression
                    (qualified_name (name))
                    (match_cases
                        (match_case
                            (number (integer))
                            (number (integer))
                        )
                        (match_case
                            (true)
                            (block)
                        )
                        (match_case
                            (false)
                            (block)
                        )
                        (match_case
                            (pattern_enum 
                                (qualified_name (qualified_name_segment (name)) (name)) 
                                (wildcard)
                            )
                            (block)
                        )
                        (match_case
                            (pattern_struct 
                                (qualified_name (name))
                                (name)
                                (name)
                            )
                            (block)
                        )
                        (match_case
                            (pattern_tuple
                                (identifier)
                                (identifier)
                            )
                            (block)
                        )
                        (match_case
                            (wildcard)
                            (block)
                        )
                    )
                )
            )
        )
    )
)

============================
Let expression
============================

fn foo() {
    let x = 8;
    let _ = 9;
    let Foo{ a, b } = foo;
    let Foo(a, b) = foo;
    let (a, b) = (true, true);
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (let_statement 
                    (identifier)
                    (number (integer))
                )
            )
            (statement
                (let_statement 
                    (wildcard)
                    (number (integer))
                )
            )
            (statement
                (let_statement 
                    (pattern_struct 
                        (qualified_name (name))
                        (name)
                        (name)
                    )
                    (qualified_name (name))
                )
            )
            (statement
                (let_statement 
                    (pattern_enum
                        (qualified_name (name))
                        (identifier)
                        (identifier)
                    )
                    (qualified_name (name))
                )
            )
            (statement
                (let_statement 
                    (pattern_tuple
                        (identifier)
                        (identifier)
                    )
                    (tuple_expressions
                        (tuple_expression (true))
                        (tuple_expression (true))
                    )
                )
            )
        )
    )
)

============================
Unary operators expression
============================

fn foo() {
    *x;
    -x;
    !x;

    -x * 1;
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement (unary_expression (qualified_name (name))))
            (statement (unary_expression (qualified_name (name))))
            (statement (unary_expression (qualified_name (name))))
            (statement
                (binary_expression
                    (unary_expression (qualified_name (name)))
                    (number (integer))
                )
            )
        )
    )
)

============================
Binary operators expression
============================

fn foo() {
    8 + 8;
    x += 8;

    8 - 8;
    x -= 8;

    8 * 8;
    x *= 8;

    8 / 8;
    x /= 8;

    8 % 2;
    x %= 2;
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (binary_expression
                    (number (integer))
                    (number (integer))
                )
            )
            (statement
                (assignment_statement
                    (name)
                    (number (integer))
                )
            )
            (statement
                (binary_expression
                    (number (integer))
                    (number (integer))
                )
            )
            (statement
                (assignment_statement
                    (name)
                    (number (integer))
                )
            )
            (statement
                (binary_expression
                    (number (integer))
                    (number (integer))
                )
            )
            (statement
                (assignment_statement
                    (name)
                    (number (integer))
                )
            )
            (statement
                (binary_expression
                    (number (integer))
                    (number (integer))
                )
            )
            (statement
                (assignment_statement
                    (name)
                    (number (integer))
                )
            )
            (statement
                (binary_expression
                    (number (integer))
                    (number (integer))
                )
            )
            (statement
                (assignment_statement
                    (name)
                    (number (integer))
                )
            )
        )
    )
)

============================
Call expression
============================

fn foo() {
    a();
    a(8,9,10);
    a::<1>(8);
    a(x = 9, y = 8);
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (call_expression 
                    (qualified_name (name))
                    (arguments)
                )
            )
            (statement
                (call_expression 
                    (qualified_name (name))
                    (arguments
                        (argument (number (integer)))
                        (argument (number (integer)))
                        (argument (number (integer)))
                    )    
                )
            )
            (statement
                (call_expression 
                    (qualified_name 
                        (name) 
                        (type_arguments 
                            (type_argument (number (integer)))
                        )
                    )
                    (arguments 
                        (argument (number (integer)))
                    ) 
                )
            )
            (statement
                (call_expression 
                    (qualified_name (name))
                    (arguments 
                        (argument 
                            (named_argument (name) (number (integer)))
                        )
                        (argument 
                            (named_argument (name) (number (integer)))
                        )
                    ) 
                )
            )
        )
    )
)

============================
Selector expression
============================

fn foo() {
    a.foo.bar;
    a.foo().bar;
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (selector_expression
                    (selector_expression
                        (qualified_name (name))
                        (name)
                    )
                    (name)
                )
            )
            (statement
                (selector_expression
                    (call_expression
                        (selector_expression
                            (qualified_name (name))
                            (name)
                        )
                        (arguments)
                    )
                    (name)
                )
            )
        )
    )
)

============================
Indexing expression
============================

fn foo() {
    a[0];
    a[x];
}

---

(source_file
    (function_declaration
        (function_signature
            (name)
            (parameters)
        )
        (block
            (statement
                (index_expression
                    (qualified_name (name))
                    (number (integer))
                )
            )
            (statement
                (index_expression
                    (qualified_name (name))
                    (qualified_name (name))
                )
            )
        )
    )
)